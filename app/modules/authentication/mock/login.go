// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/login.go

// Package mock is a generated GoMock package.
package mock

import (
	model "app/modules/authentication/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLoginRepository is a mock of LoginRepository interface.
type MockLoginRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLoginRepositoryMockRecorder
}

// MockLoginRepositoryMockRecorder is the mock recorder for MockLoginRepository.
type MockLoginRepositoryMockRecorder struct {
	mock *MockLoginRepository
}

// NewMockLoginRepository creates a new mock instance.
func NewMockLoginRepository(ctrl *gomock.Controller) *MockLoginRepository {
	mock := &MockLoginRepository{ctrl: ctrl}
	mock.recorder = &MockLoginRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginRepository) EXPECT() *MockLoginRepositoryMockRecorder {
	return m.recorder
}

// CheckExistByEmail mocks base method.
func (m *MockLoginRepository) CheckExistByEmail(ctx context.Context, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistByEmail", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistByEmail indicates an expected call of CheckExistByEmail.
func (mr *MockLoginRepositoryMockRecorder) CheckExistByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistByEmail", reflect.TypeOf((*MockLoginRepository)(nil).CheckExistByEmail), ctx, email)
}

// CreateSession mocks base method.
func (m *MockLoginRepository) CreateSession(ctx context.Context, data *model.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockLoginRepositoryMockRecorder) CreateSession(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockLoginRepository)(nil).CreateSession), ctx, data)
}

// GetAccountByEmail mocks base method.
func (m *MockLoginRepository) GetAccountByEmail(ctx context.Context, email string) (*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByEmail", ctx, email)
	ret0, _ := ret[0].(*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByEmail indicates an expected call of GetAccountByEmail.
func (mr *MockLoginRepositoryMockRecorder) GetAccountByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByEmail", reflect.TypeOf((*MockLoginRepository)(nil).GetAccountByEmail), ctx, email)
}
